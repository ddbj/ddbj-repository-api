openapi: 3.1.0

info:
  title: DDBJ Repository API
  version: 1.0.0

servers:
  - url: https://repository.ddbj.nig.ac.jp/api
  - url: https://repository-staging.ddbj.nig.ac.jp/api
  - url: https://repository-dev.ddbj.nig.ac.jp/api

security:
  - BearerAuth: []

paths:
  /api-key:
    get:
      description: Get login URL.

      tags:
        - Authentication

      security: []

      responses:
        '200':
          description: Returns the login URL. Open this URL in your browser.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [login_url]

                properties:
                  login_url:
                    type: string
                    format: uri

              example:
                login_url: https://repository.ddbj.nig.ac.jp/auth/login

  /api-key/regenerate:
    post:
      description: Re-generate API key.

      tags:
        - Authentication

      responses:
        '200':
          description: Returns a new API key.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [api_key]

                properties:
                  api_key:
                    type: string

              example:
                api_key: ddbj_repository_VbHQePhpFhvrKI7by1kteMvN2ImLfhGVK4mTPFEZ2EO

        '401':
          $ref: '#/components/responses/Unauthorized'

  /me:
    get:
      description: Get your login ID.

      tags:
        - Authentication

      responses:
        '200':
          description: Returns the user's login ID.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [uid]

                properties:
                  uid:
                    type: string

              example:
                uid: alice

        '401':
          $ref: '#/components/responses/Unauthorized'

  /validations/via-file:
    post:
      description: Run validation.

      tags:
        - Run

      requestBody:
        $ref: '#/components/requestBodies/ViaFile'

      responses:
        '201':
          $ref: '#/components/responses/CreateResponseCreated'

        '400':
          $ref: '#/components/responses/CreateResponseBadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /submissions/via-file:
    post:
      description: Submit files.

      tags:
        - Run

      requestBody:
        $ref: '#/components/requestBodies/ViaFile'

      responses:
        '201':
          $ref: '#/components/responses/CreateResponseCreated'

        '400':
          $ref: '#/components/responses/CreateResponseBadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /requests:
    get:
      description: Get your requests.

      tags:
        - Request

      parameters:
        - in: query
          name: page

          schema:
            type: integer

      responses:
        '200':
          description: Return your requests.

          headers:
            Link:
              schema:
                type: string

              description: GitHub-style pagination URLs. See [Using pagination in the REST API - GitHub Docs](https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28) for details.

          content:
            application/json:
              schema:
                type: array

                items:
                  $ref: '#/components/schemas/Request'

              example:
                - id: 100
                  url: https://repository.ddbj.nig.ac.jp/api/requests/100
                  created_at: '2024-01-01T00:00:00.000Z'
                  purpose: submit
                  db: BioProject
                  status: finished
                  validity: valid

                  objects:
                    - id: BioProject
                      files:
                        - path: mybioproject.xml
                          url: https://repository.ddbj.nig.ac.jp/api/requests/100/files/mybioproject.xml

                  validation_reports:
                    - object_id: _base
                      path: null
                      validity: valid
                      details: null

                    - object_id: BioSample
                      path: mybiosample.xml
                      validity: valid

                      details:
                        validity: true
                        answer: 42

                  submission:
                    id: X-200
                    url: https://repository.ddbj.nig.ac.jp/api/submissions/X-200

                - id: 101
                  url: https://repository.ddbj.nig.ac.jp/api/requests/101
                  created_at: '2024-01-01T01:00:00.000Z'
                  purpose: validate
                  db: BioSample
                  status: waiting
                  validity: null

                  objects:
                    - id: BioSample
                      files:
                        - path: mybiosample.xml
                          url: https://repository.ddbj.nig.ac.jp/api/requests/101/files/mybiosample.xml

                  validation_reports:
                    - object_id: _base
                      path: null
                      validity: null
                      details: null

                  submission: null

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

  /requests/{id}:
    get:
      description: Get the request.

      tags:
        - Request

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

          example: 42

      responses:
        '200':
          description: Return the request.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'

              example:
                id: 42
                url: https://repository.ddbj.nig.ac.jp/api/requests/42
                status: finished
                validity: valid

                validation_reports:
                  - object_id: _base
                    path: null
                    validity: null
                    details: null

                  - object_id: BioSample
                    path: mybiosample.xml
                    validity: valid

                    details:
                      validity: true
                      answer: 42

                submission:
                  id: X-84
                  url: https://repository.ddbj.nig.ac.jp/api/submissions/X-84

        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      description: Cancel the request.

      tags:
        - Request

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

          example: 42

      responses:
        '200':
          description: Request canceled successfully.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [message]

                properties:
                  message:
                    type: string

        '401':
          $ref: '#/components/responses/Unauthorized'

        '409':
          description: Request already canceled or finished.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /requests/{id}/files/{path}:
    get:
      description: Get the submission file content.

      tags:
        - Request

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

        - name: path
          in: path
          required: true
          style: matrix
          explode: true

          schema:
            type: string

          example: dest/mybiosample.xml

      responses:
        '302':
          description: Redirect to the file.

        '401':
          $ref: '#/components/responses/Unauthorized'

  /submissions:
    get:
      description: Get your submissions.

      tags:
        - Submission

      parameters:
        - in: query
          name: page

          schema:
            type: integer

      responses:
        '200':
          description: Return your submissions.

          headers:
            Link:
              schema:
                type: string

              description: The GitHub-style pagination URLs. See [Using pagination in the REST API - GitHub Docs](https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28) for details.

          content:
            application/json:
              schema:
                type: array

                items:
                  $ref: '#/components/schemas/Submission'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

  /submissions/{id}:
    get:
      description: Get the submission.

      tags:
        - Submission

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: string

          example: X-42

      responses:
        '200':
          description: Return the submission.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'

        '401':
          $ref: '#/components/responses/Unauthorized'

  /submissions/{id}/files/{path}:
    get:
      description: Get the submission file content.

      tags:
        - Submission

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: string

          example: X-42

        - name: path
          in: path
          required: true
          style: matrix
          explode: true

          schema:
            type: string

          example: dest/mybiosample.xml

      responses:
        '302':
          description: Redirect to the file.

        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Request:
      type: object
      additionalProperties: false
      required: [id, url, created_at, purpose, db, objects, status, validity, validation_reports, submission]

      properties:
        id:
          type: integer

        url:
          type: string
          format: uri

        created_at:
          type: string
          format: date-time

        purpose:
          type: string

          enum:
            - validate
            - submit

        db:
          type: string

          enum:
            - BioProject
            - BioSample
            - Trad
            - DRA
            - GEA
            - MetaboBank
            - JVar

        objects:
          $ref: '#/components/schemas/Objects'

        status:
          type: string

          enum:
            - waiting
            - processing
            - finished
            - canceled

        validity:
          type:
            - string
            - 'null'

          enum:
            - valid
            - invalid
            - error
            - null

        validation_reports:
          type: array

          items:
            $ref: '#/components/schemas/ValidationReport'

        submission:
          type:
            - object
            - 'null'

          required: [id, url]

          properties:
            id:
              type: string

            url:
              type: string
              format: uri

    Submission:
      type: object
      additionalProperties: false
      required: [id, url, created_at, db, objects]

      properties:
        id:
          type: string

        url:
          type: string
          format: uri

        created_at:
          type: string
          format: date-time

        db:
          type: string

          enum:
            - BioProject
            - BioSample
            - Trad
            - DRA
            - GEA
            - MetaboBank
            - JVar

        objects:
          $ref: '#/components/schemas/Objects'

    Objects:
      type: array

      items:
        type: object
        additionalProperties: false
        required: [id, files]

        properties:
          id:
            type: string

            enum:
              - BioProject
              - BioSample
              - Sequence
              - Annotation
              - Submission
              - Experiment
              - Run
              - RunFile
              - Analysis
              - AnalysisFile
              - IDF
              - SDRF
              - ADF
              - RawDataFile
              - ProcessedDataFile
              - MAF
              - Excel
              - VariantCallFile

          files:
            type: array

            items:
              type: object
              additionalProperties: false
              required: [path, url]

              properties:
                path:
                  type: string

                url:
                  type: string
                  format: uri

    ValidationReport:
      type: object
      additionalProperties: false
      required: [object_id, path, validity, details]

      properties:
        object_id:
          type: string

          enum:
            - _base
            - BioProject
            - BioSample
            - Sequence
            - Annotation
            - Submission
            - Experiment
            - Run
            - RunFile
            - Analysis
            - AnalysisFile
            - IDF
            - SDRF
            - ADF
            - RawDataFile
            - ProcessedDataFile
            - MAF
            - Excel
            - VariantCallFile

        path:
          type:
            - string
            - 'null'

        validity:
          type:
            - string
            - 'null'

          enum:
            - valid
            - invalid
            - error
            - null

        details:
          type:
            - object
            - 'null'

    File:
      type: string
      format: binary

    Path:
      type: string
      description: Path of the file on the NIG supercomputer, relative to the home directory of the authorised user.

    Destination:
      type: string
      description: Destination of the file to be submitted.

    Error:
      type: object
      additionalProperties: false
      required: [error]

      properties:
        error:
          type: string

    BioProjectViaFile:
      type: object
      additionalProperties: false

      allOf:
        - oneOf:
          - required:
            - BioProject[file]
          - required:
            - BioProject[path]

      properties:
        db:
          type: string
          enum: [BioProject]

        BioProject[file]:
          $ref: '#/components/schemas/File'

        BioProject[path]:
          $ref: '#/components/schemas/Path'

        BioProject[destination]:
          $ref: '#/components/schemas/Destination'

    BioSampleViaFile:
      type: object
      additionalProperties: false

      allOf:
        - oneOf:
          - required:
            - BioSample[file]
          - required:
            - BioSample[path]

      properties:
        db:
          type: string
          enum: [BioSample]

        BioSample[file]:
          $ref: '#/components/schemas/File'

        BioSample[path]:
          $ref: '#/components/schemas/Path'

        BioSample[destination]:
          $ref: '#/components/schemas/Destination'

    TradViaFile:
      type: object
      additionalProperties: false

      allOf:
        - oneOf:
          - required:
            - Sequence[][file]
          - required:
            - Sequence[][path]
        - oneOf:
          - required:
            - Annotation[][file]
          - required:
            - Annotation[][path]

      properties:
        db:
          type: string
          enum: [Trad]

        Sequence[][file]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/File'

        Sequence[][path]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/Path'

        Sequence[][destination]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/Destination'

        Annotation[][file]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/File'

        Annotation[][path]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/Path'

        Annotation[][destination]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/Destination'

    DRAViaFile:
      type: object
      additionalProperties: false

      allOf:
        - oneOf:
          - required:
            - Submission[file]
          - required:
            - Submission[path]
        - oneOf:
          - required:
            - Experiment[file]
          - required:
            - Experiment[path]
        - oneOf:
          - required:
            - Run[file]
          - required:
            - Run[path]
        - oneOf:
          - required:
            - RunFile[][file]
          - required:
            - RunFile[][path]

      properties:
        db:
          type: string
          enum: [DRA]

        Submission[file]:
          $ref: '#/components/schemas/File'

        Submission[path]:
          $ref: '#/components/schemas/Path'

        Submission[destination]:
          $ref: '#/components/schemas/Destination'

        Experiment[file]:
          $ref: '#/components/schemas/File'

        Experiment[path]:
          $ref: '#/components/schemas/Path'

        Experiment[destination]:
          $ref: '#/components/schemas/Destination'

        Run[file]:
          $ref: '#/components/schemas/File'

        Run[path]:
          $ref: '#/components/schemas/Path'

        Run[destination]:
          $ref: '#/components/schemas/Destination'

        RunFile[][file]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/File'

        RunFile[][path]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/Path'

        RunFile[][destination]:
          type: array
          minItems: 1

          items:
            $ref: '#/components/schemas/Destination'

        Analysis[file]:
          $ref: '#/components/schemas/File'

        Analysis[path]:
          $ref: '#/components/schemas/Path'

        Analysis[destination]:
          $ref: '#/components/schemas/Destination'

        AnalysisFile[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        AnalysisFile[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        AnalysisFile[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'

    GEAViaFile:
      type: object
      additionalProperties: false

      allOf:
        - oneOf:
          - required:
            - IDF[file]
          - required:
            - IDF[path]
        - oneOf:
          - required:
            - SDRF[file]
          - required:
            - SDRF[path]

      properties:
        db:
          type: string
          enum: [GEA]

        IDF[file]:
          $ref: '#/components/schemas/File'

        IDF[path]:
          $ref: '#/components/schemas/Path'

        IDF[destination]:
          $ref: '#/components/schemas/Destination'

        SDRF[file]:
          $ref: '#/components/schemas/File'

        SDRF[path]:
          $ref: '#/components/schemas/Path'

        SDRF[destination]:
          $ref: '#/components/schemas/Destination'

        ADF[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        ADF[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        ADF[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'

        RawDataFile[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        RawDataFile[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        RawDataFile[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'

        ProcessedDataFile[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        ProcessedDataFile[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        ProcessedDataFile[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'

    MetaboBankViaFile:
      type: object
      additionalProperties: false

      allOf:
        - oneOf:
          - required:
            - IDF[file]
          - required:
            - IDF[path]
        - oneOf:
          - required:
            - SDRF[file]
          - required:
            - SDRF[path]

      properties:
        db:
          type: string
          enum: [MetaboBank]

        IDF[file]:
          $ref: '#/components/schemas/File'

        IDF[path]:
          $ref: '#/components/schemas/Path'

        IDF[destination]:
          $ref: '#/components/schemas/Destination'

        SDRF[file]:
          $ref: '#/components/schemas/File'

        SDRF[path]:
          $ref: '#/components/schemas/Path'

        SDRF[destination]:
          $ref: '#/components/schemas/Destination'

        MAF[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        MAF[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        MAF[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'

        RawDataFile[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        RawDataFile[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        RawDataFile[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'

        ProcessedDataFile[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        ProcessedDataFile[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        ProcessedDataFile[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'

        BioSample[file]:
          $ref: '#/components/schemas/File'

        BioSample[path]:
          $ref: '#/components/schemas/Path'

        BioSample[destination]:
          $ref: '#/components/schemas/Destination'

    JVarViaFile:
      type: object
      additionalProperties: false

      allOf:
        - oneOf:
          - required:
            - Excel[file]
          - required:
            - Excel[path]

      properties:
        db:
          type: string
          enum: [JVar]

        Excel[file]:
          $ref: '#/components/schemas/File'

        Excel[path]:
          $ref: '#/components/schemas/Path'

        Excel[destination]:
          $ref: '#/components/schemas/Destination'

        VariantCallFile[][file]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/File'

        VariantCallFile[][path]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Path'

        VariantCallFile[][destination]:
          type: array
          minItems: 0

          items:
            $ref: '#/components/schemas/Destination'


  requestBodies:
    ViaFile:
      content:
        multipart/form-data:
          schema:
            oneOf:
              - $ref: '#/components/schemas/BioProjectViaFile'
              - $ref: '#/components/schemas/BioSampleViaFile'
              - $ref: '#/components/schemas/TradViaFile'
              - $ref: '#/components/schemas/DRAViaFile'
              - $ref: '#/components/schemas/GEAViaFile'
              - $ref: '#/components/schemas/MetaboBankViaFile'
              - $ref: '#/components/schemas/JVarViaFile'

            discriminator:
              propertyName: db

              mapping:
                BioProject: '#/components/schemas/BioProjectViaFile'
                BioSample: '#/components/schemas/BioSampleViaFile'
                Trad: '#/components/schemas/TradViaFile'
                DRA: '#/components/schemas/DRAViaFile'
                GEA: '#/components/schemas/GEAViaFile'
                MetaboBank: '#/components/schemas/MetaboBankViaFile'
                JVar: '#/components/schemas/JVarViaFile'

  responses:
    CreateResponseCreated:
      description: The requested process initiated successfully.

      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required: [request]

            properties:
              request:
                type: object
                additionalProperties: false
                required: [id, url]

                properties:
                  id:
                    type: integer

                  url:
                    type: string
                    format: uri

          example:
            request:
              id: 42
              url: http://www.example.com/api/requests/42

    CreateResponseBadRequest:
      description: The requested process could not be initiated.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: path must be in /home/alice

    BadRequest:
      description: Unexpected parameter specified.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: expected :page in 1..3; got 4

    Unauthorized:
      description: Not authenticated.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: Unauthorized

    UnprocessableEntity:
      description: Invalid parameter or payload was specified.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: 'Validation failed: Path is duplicated: mybiosample.xml'
